@{
    Layout = "_AdminLayout";
}
<div class="container-fluid px-4">
    <div id="bookingTable" class="card mb-4">
        <div class="card-body">
            <table id="bookingDatatable">
                <thead>
                    <tr>
                        <th>Booking ID</th>
                        <th>Customer ID</th>
                        <th>Date</th>
                        <th>Time</th>
                        <th>Number of People</th>
                        <th>Note</th>
                        <th>Date Booking</th>
                        <th>Date Start</th>
                        <th>Date Check-Out</th>
                        <th>Booking Table</th>
                        <th>Is Check</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody id="bookingTableBody">
                    <!-- Rows will be added here by JavaScript -->
                </tbody>
            </table>
            <!-- Modal -->
            <div id="detailModal" class="modal">
                <div class="modal-content">
                    <span class="close" onclick="closeModal()">&times;</span>
                    <h2>Update Booking</h2>
                    <form id="updateForm">
                        <div class="form-row">
                            <label for="date">Date:</label>
                            <input type="date" id="date" name="date">
                        </div>
                        <div class="form-row">
                            <label for="time">Time:</label>
                            <input type="time" id="time" name="time">
                        </div>
                        <div class="form-row">
                            <label for="numberOfPeople">Number of People:</label>
                            <input type="number" id="numberOfPeople" name="numberOfPeople">
                        </div>
                        <div class="form-row">
                            <label for="note">Note:</label>
                            <textarea id="note" name="note"></textarea>
                        </div>
                        <div class="form-row">
                            <label for="dateStart">Date Start:</label>
                            <input type="datetime-local" id="dateStart" name="dateStart">
                        </div>
                        <div class="form-row">
                            <label for="dateCheckOut">Date Check-Out:</label>
                            <input type="datetime-local" id="dateCheckOut" name="dateCheckOut">
                        </div>
                        <div class="form-row">
                            <label for="bookingTable2">Booking Table:</label>
                            <select id="bookingTable2" name="bookingTable2"></select>
                        </div>
                        <div class="form-row">
                            <label for="isCheck">Is Check:</label>
                            <input type="checkbox" id="isCheck" name="isCheck">
                        </div>
                        <div class="form-row">
                            <input type="hidden" id="bookingId" name="bookingId">
                        </div>
                        <div class="form-row">
                            <button type="button" onclick="updateBooking()">Update</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
<script>
    let bookings = [];

    async function fetchBookings() {
        try {
            const response = await fetch('https://localhost:7130/api/Booking');
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const data = await response.json();
            console.log('Bookings:', data);
            return data;
        } catch (error) {
            console.error('Fetch error:', error);
            return [];
        }
    }

    async function populateBookingTable() {
        bookings = await fetchBookings();
        const tableBody = document.getElementById('bookingTableBody');
        tableBody.innerHTML = '';
        bookings.forEach(booking => {
            const row = document.createElement('tr');
            row.innerHTML = `
                    <td>${booking.id}</td>
                    <td>${booking.customerId}</td>
                    <td>${new Date(booking.date).toLocaleDateString()}</td>
                    <td>${booking.time}</td>
                    <td>${booking.numberOfPeople}</td>
                    <td>${booking.note}</td>
                    <td>${new Date(booking.dateBooking).toLocaleDateString()}</td>
                    <td>${new Date(booking.dateStart).toLocaleDateString()}</td>
                    <td>${new Date(booking.dateCheckOut).toLocaleDateString()}</td>
                    <td>${booking.bookingTable}</td>
                    <td>${booking.isCheck ? 'Checked' : 'Not Checked'}</td>
                    <td><button onclick="openModal(${booking.id})">Detail</button></td>
                `;
            tableBody.appendChild(row);
            console.log(row)
        });
    }

    let tablesData = [];

    async function populateTables() {
        const apiUrl = 'https://localhost:7135/api/Table';

        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const data = await response.json();
            tablesData = data;
            const tableSelect = document.getElementById('bookingTable2');
            data.forEach(table => {
                const option = document.createElement('option');
                option.value = table.id;
                option.textContent = table.name;
                tableSelect.appendChild(option);
            });
        } catch (error) {
            console.error('Fetch error:', error);
        }
    }

    async function openModal(id) {
        const apiUrl = `https://localhost:7130/api/Booking/getDetailById/${id}`;

        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const data = await response.json();
            const booking = data[0];

            function formatDateTime(value) {
                if (value) {
                    const date = new Date(value);
                    return isNaN(date.getTime()) ? '' : date.toISOString().slice(0, 16);
                }
                return '';
            }

            document.getElementById('date').value = booking.date ? new Date(booking.date).toISOString().split('T')[0] : '';
            document.getElementById('time').value = booking.time ? booking.time.slice(0, 5) : '';
            document.getElementById('numberOfPeople').value = booking.numberOfPeople || '';
            document.getElementById('note').value = booking.note || '';
            document.getElementById('dateStart').value = formatDateTime(booking.dateStart);
            document.getElementById('dateCheckOut').value = formatDateTime(booking.dateCheckOut);

            const table = tablesData.find(t => t.id === booking.bookingTable);
            if (table) {
                document.getElementById('bookingTable2').value = table.id;
            } else {
                document.getElementById('bookingTable2').value = '';
            }

            document.getElementById('isCheck').checked = booking.isCheck === true;
            document.getElementById('bookingId').value = booking.id;

            document.getElementById('detailModal').style.display = 'block';
        } catch (error) {
            console.error('Fetch error:', error);
        }
    }

    function closeModal() {
        document.getElementById('detailModal').style.display = 'none';
    }

    async function updateBooking() {
        const id = parseInt(document.getElementById('bookingId').value);
        const dateStart = document.getElementById('dateStart').value;
        const dateCheckOut = document.getElementById('dateCheckOut').value;
        const bookingTable = document.getElementById('bookingTable2').value;
        const isCheck = document.getElementById('isCheck').checked;

        const booking = bookings.find(b => b.id === id);

        if (booking) {
            booking.dateStart = dateStart;
            booking.dateCheckOut = dateCheckOut;
            booking.bookingTable = bookingTable;
            booking.isCheck = isCheck;

            try {
                const response = await fetch(`https://localhost:7130/api/Booking/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(booking)
                });
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                console.log('Booking updated successfully');
                closeModal();
                await populateBookingTable();
            } catch (error) {
                console.error('Update error:', error);
            }
        }
    }

    document.addEventListener('DOMContentLoaded', async () => {
        await populateTables();
        await populateBookingTable();
    });
</script>
